<!DOCTYPE html>
<html>
  <head>
    <meta charset="us-ascii" />
    <link
      href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/@mdi/font@6/css/materialdesignicons.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.6.15/vuetify.min.css"
      rel="stylesheet"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <title>Coaching Client Cost Calculator</title>

  <body>
    <div id="app">
      <v-app>
        <v-main>
          <v-container>
            <v-row>
              <v-col cols="5">
                <v-btn
                  color="primary"
                  :disabled="currentStep == 1"
                  @click="currentStep -=1"
                  >Back</v-btn
                >
              </v-col>
              <v-col cols="2" class="text-center">
                <v-btn-toggle v-model="calculationMode" rounded mandatory>
                  <v-btn value="income" icon small outlined>
                    <v-icon>mdi-bank-check</v-icon>
                  </v-btn>
                  <v-btn value="budget" icon small outlined>
                    <v-icon>mdi-currency-usd</v-icon>
                  </v-btn>
                </v-btn-toggle>
              </v-col>
              <v-col cols="5">
                <v-btn
                  class="float-right"
                  color="primary"
                  :disabled="currentStep == 3"
                  @click="currentStep += 1"
                  >Next</v-btn
                >
              </v-col>
            </v-row>
            <v-row>
              <v-col cols="12">
                <v-stepper v-model="currentStep">
                  <v-stepper-header>
                    <v-stepper-step :complete="currentStep > 1" step="1"
                      >Costs</v-stepper-step
                    >
                    <v-divider></v-divider>
                    <v-stepper-step :complete="currentStep > 2" step="2"
                      >Rates</v-stepper-step
                    >
                    <v-divider></v-divider>
                    <v-stepper-step step="3">Results</v-stepper-step>
                  </v-stepper-header>
                  <v-stepper-items>
                    <v-stepper-content step="1">
                      <v-row>
                        <v-col cols="12" sm="4">
                          Program Price: ${{ productPrice }}
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="productPrice"
                            min="0"
                            max="10000"
                            step="50"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ '$' + props.value }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                      <v-row v-if="calculationMode === 'budget'">
                        <v-col cols="12" sm="4">
                          Ad Budget: ${{ adSpend }}
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="adSpend"
                            min="0"
                            max="10000"
                            step="50"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ '$' + props.value }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                      <v-row v-if="calculationMode === 'budget'">
                        <v-col cols="12" sm="4">
                          Cost per Lead: ${{ costPerLead }}
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="costPerLead"
                            min="0.5"
                            max="100"
                            step="0.5"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ '$' + props.value }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                      <v-row v-else-if="calculationMode === 'income'">
                        <v-col cols="12" sm="4">
                          Income Goal: ${{ incomeGoal }}
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="incomeGoal"
                            min="0"
                            max="100000"
                            step="5000"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ '$' + props.value }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                    </v-stepper-content>
                    <v-stepper-content step="2">
                      <v-row>
                        <v-col cols="12" sm="4">
                          Call Scheduled Rate: {{ (discoveryConversion * 100)
                          }}%
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="discoveryConversion"
                            min="0"
                            max="1"
                            step="0.05"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ (props.value * 100) + '%' }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                      <v-row>
                        <v-col cols="12" sm="4">
                          Call Completed Rate: {{ (showUpRate * 100) }}%
                        </v-col>
                        <v-col cols="12" sm="8"
                          ><v-slider
                            class="flex-item"
                            v-model="showUpRate"
                            min="0"
                            max="1"
                            step="0.05"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ (props.value * 100) + '%' }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                      <v-row>
                        <v-col cols="12" sm="4">
                          Enrollment Rate: {{ (enrollmentRate * 100) }}%
                        </v-col>
                        <v-col cols="12" sm="8">
                          <v-slider
                            class="flex-item"
                            v-model="enrollmentRate"
                            min="0"
                            max="1"
                            step="0.05"
                          >
                            <template v-slot:thumb-label="props"
                              >{{ (props.value * 100) + '%' }}</template
                            >
                          </v-slider>
                        </v-col>
                      </v-row>
                    </v-stepper-content>
                    <v-stepper-content step="3">
                      <v-row v-for="item in results" :key="item.label">
                        <v-col cols="8" sm="10">
                          <v-icon left>{{ item.icon }}</v-icon>
                          {{ item.label }}
                        </v-col>
                        <v-col cols="4" sm="2" class="float-right">
                          {{ item.value }}
                        </v-col>
                      </v-row>
                    </v-stepper-content>
                  </v-stepper-items>
                </v-stepper>
              </v-col>
            </v-row>
          </v-container>
        </v-main>
      </v-app>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.6.15/vuetify.min.js"></script>

    <script>
      new Vue({
        el: "#app",
        vuetify: new Vuetify(),
        data() {
          return {
            productPrice: 3000,
            adSpend: 1000,
            costPerLead: 5,
            discoveryConversion: 0.05,
            showUpRate: 0.7,
            enrollmentRate: 0.2,
            currentStep: 1,
            calculationMode: "income",
            incomeGoal: 10000,
          };
        },
        methods: {
          budgetBasedTotalLeads() {
            return this.costPerLead !== 0
              ? Math.floor(this.adSpend / this.costPerLead)
              : 0;
          },
          budgetBasedTotalEnrolled() {
            return this.totalShowedUp !== 0
              ? Math.floor(this.totalShowedUp * this.enrollmentRate)
              : 0;
          },
          budgetBasedTotalRevenue() {
            return this.totalEnrolled * this.productPrice;
          },
          budgetBasedGrossProfit() {
            return this.totalRevenue - this.adSpend;
          },
          budgetBasedROAS() {
            return this.adSpend !== 0 ? this.totalRevenue / this.adSpend : 0;
          },
          budgetBasedAdCostTotal(){
            return this.adSpend
          },
          budgetBasedAdCostPerDiscovery() {
            return this.totalDiscoveryCalls !== 0
              ? this.adSpend / this.totalDiscoveryCalls
              : 0;
          },
          budgetBasedAdCostPerEnrollment() {
            return this.totalEnrolled !== 0
              ? this.adSpend / this.totalEnrolled
              : 0;
          },
          budgetBasedTotalDiscoveryCalls() {
            return this.totalLeads !== 0
              ? Math.floor(this.totalLeads * this.discoveryConversion)
              : 0;
          },
          budgetBasedTotalShowedUp() {
            return this.totalDiscoveryCalls !== 0
              ? Math.floor(this.totalDiscoveryCalls * this.showUpRate)
              : 0;
          },
          incomeBasedTotalLeads() {
            let costForGoalIncome =
              this.incomeGoal /
              (this.productPrice *
                this.enrollmentRate *
                this.showUpRate *
                this.discoveryConversion);
            return Math.ceil(costForGoalIncome / this.costPerLead);
          },
          incomeBasedTotalEnrolled() {
            return this.productPrice !== 0
              ? Math.ceil(this.incomeGoal / this.productPrice)
              : 0;
          },
          incomeBasedTotalRevenue() {
            return this.totalEnrolled * this.productPrice;
          },
          incomeBasedGrossProfit() {
            return this.incomeGoal;
          },
          incomeBasedROAS() {
            let cost = this.totalLeads * this.costPerLead;
            return cost !== 0 ? this.totalRevenue / cost : 0;
          },
          incomeBasedAdCostTotal(){
            return this.totalLeads * this.costPerLead
          },
          incomeBasedAdCostPerDiscovery() {
            let cost = this.totalLeads * this.costPerLead;
            return this.totalDiscoveryCalls !== 0
              ? cost / this.totalDiscoveryCalls
              : 0;
          },
          incomeBasedAdCostPerEnrollment() {
            let cost = this.totalLeads * this.costPerLead;
            return this.totalEnrolled !== 0 ? cost / this.totalEnrolled : 0;
          },
          incomeBasedTotalDiscoveryCalls() {
            return this.totalEnrolled !== 0 && this.enrollmentRate !== 0
              ? Math.ceil(this.totalEnrolled / this.enrollmentRate)
              : 0;
          },
          incomeBasedTotalShowedUp() {
            return this.totalDiscoveryCalls !== 0
              ? Math.ceil(this.totalDiscoveryCalls * this.showUpRate)
              : 0;
          },
        },
        computed: {
          results() {
            return [
              {
                label: "Total Leads",
                value: this.totalLeads,
                icon: "mdi-account-multiple",
              },
              {
                label: "Calls Booked",
                value: this.totalDiscoveryCalls,
                icon: "mdi-phone",
              },
              {
                label: "Calls Completed",
                value: this.totalShowedUp,
                icon: "mdi-account-check",
              },
              {
                label: "Clients Enrolled",
                value: this.totalEnrolled,
                icon: "mdi-account-arrow-right",
              },
              {
                label: "Top Line Revenue",
                value: `$${this.totalRevenue.toFixed(2)}`,
                icon: "mdi-cash-multiple",
              },
              {
                label: "Ad Cost Total",
                value: `$${this.adCostsTotal.toFixed(2)}`,
                icon: "mdi-cash",
              },
              {
                label: "Ad Cost per Call",
                value: `$${this.adCostPerDiscovery.toFixed(2)}`,
                icon: "mdi-cash",
              },
              {
                label: "Ad Cost per Client",
                value: `$${this.adCostPerEnrollment.toFixed(2)}`,
                icon: "mdi-cash-minus",
              },
              {
                label: "ROAS",
                value: this.ROAS.toFixed(2),
                icon: "mdi-chart-line",
              },
              {
                label: "Overall Conversion Rate",
                value: `${this.overallConversionRate.toFixed(2)}%`,
                icon: "mdi-chart-pie",
              },
              {
                label: "Gross Profit",
                value: `$${this.grossProfit.toFixed(2)}`,
                icon: "mdi-cash-plus",
              },
              {
                label: "Gross Margin",
                value: `${this.grossMargin.toFixed(2)}%`,
                icon: "mdi-chart-bar",
              },
            ];
          },
          totalLeads() {
            const strategies = {
              budget: this.budgetBasedTotalLeads,
              income: this.incomeBasedTotalLeads,
            };
            return strategies[this.calculationMode]();
          },
          totalDiscoveryCalls() {
            return this.calculationMode === "budget"
              ? this.budgetBasedTotalDiscoveryCalls()
              : this.incomeBasedTotalDiscoveryCalls();
          },
          totalShowedUp() {
            return this.calculationMode === "budget"
              ? this.budgetBasedTotalShowedUp()
              : this.incomeBasedTotalShowedUp();
          },
          totalEnrolled() {
            const strategies = {
              budget: this.budgetBasedTotalEnrolled,
              income: this.incomeBasedTotalEnrolled,
            };
            return strategies[this.calculationMode]();
          },
          totalRevenue() {
            const strategies = {
              budget: this.budgetBasedTotalRevenue,
              income: this.incomeBasedTotalRevenue,
            };
            return strategies[this.calculationMode]();
          },
          grossProfit() {
            const strategies = {
              budget: this.budgetBasedGrossProfit,
              income: this.incomeBasedGrossProfit,
            };
            return strategies[this.calculationMode]();
          },
          ROAS() {
            const strategies = {
              budget: this.budgetBasedROAS,
              income: this.incomeBasedROAS,
            };
            return strategies[this.calculationMode]();
          },
          adCostsTotal(){
            const strategies = {
              budget: this.budgetBasedAdCostTotal,
              income: this.incomeBasedAdCostTotal,
            };
            return strategies[this.calculationMode]();
          },
          adCostPerDiscovery() {
            const strategies = {
              budget: this.budgetBasedAdCostPerDiscovery,
              income: this.incomeBasedAdCostPerDiscovery,
            };
            return strategies[this.calculationMode]();
          },
          adCostPerEnrollment() {
            const strategies = {
              budget: this.budgetBasedAdCostPerEnrollment,
              income: this.incomeBasedAdCostPerEnrollment,
            };
            return strategies[this.calculationMode]();
          },
          overallConversionRate() {
            return this.totalLeads !== 0
              ? (this.totalEnrolled / this.totalLeads) * 100
              : 0;
          },
          grossMargin() {
            return this.totalRevenue !== 0
              ? (this.grossProfit / this.totalRevenue) * 100
              : 0;
          },
        },
      });
    </script>
  </body>
</html>
